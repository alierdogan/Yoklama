// <auto-generated />
using System;
using DataAccess.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(WebAPIContext))]
    [Migration("20230509200640_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Entities.Concrete.Classroom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Entities.Concrete.District", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CODE")
                        .HasColumnType("int");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PROVINCEREF")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Entities.Concrete.Lesson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClassroomID")
                        .HasColumnType("int");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DURATION")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Entities.Concrete.Neighbourhood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Neighbourhood");
                });

            modelBuilder.Entity("Entities.Concrete.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ADDRESS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GENDER")
                        .HasColumnType("int");

                    b.Property<long>("MERNISNO")
                        .HasColumnType("bigint");

                    b.Property<long>("MOBILEPHONE")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NeighbourhoodID")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<string>("SURNAME")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("NeighbourhoodID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Entities.Concrete.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CODE")
                        .HasColumnType("int");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Entities.Concrete.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Entities.Concrete.School", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NeighbourhoodID")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("NeighbourhoodID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClassroomID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PersonID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Entities.Concrete.Teacher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClassroomID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PersonID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<long>("CREATEDBY")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CREATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MODIFICATIONDATE")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MODIFIEDBY")
                        .HasColumnType("bigint");

                    b.Property<string>("PASSWORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("STATUS")
                        .HasColumnType("int");

                    b.Property<string>("USERNAME")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LessonStudent", b =>
                {
                    b.Property<int>("LessonsID")
                        .HasColumnType("int");

                    b.Property<int>("StudentsID")
                        .HasColumnType("int");

                    b.HasKey("LessonsID", "StudentsID");

                    b.HasIndex("StudentsID");

                    b.ToTable("LessonStudent");
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.Property<int>("SchoolsID")
                        .HasColumnType("int");

                    b.Property<int>("TeachersID")
                        .HasColumnType("int");

                    b.HasKey("SchoolsID", "TeachersID");

                    b.HasIndex("TeachersID");

                    b.ToTable("SchoolTeacher");
                });

            modelBuilder.Entity("Entities.Concrete.Branch", b =>
                {
                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany("Branches")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Entities.Concrete.School", "School")
                        .WithMany("Branches")
                        .HasForeignKey("SchoolID");

                    b.Navigation("Department");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Concrete.Classroom", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany("Classrooms")
                        .HasForeignKey("BranchID");

                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Entities.Concrete.School", "School")
                        .WithMany("Classrooms")
                        .HasForeignKey("SchoolID");

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.HasOne("Entities.Concrete.School", "School")
                        .WithMany("Departments")
                        .HasForeignKey("SchoolID");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Concrete.District", b =>
                {
                    b.HasOne("Entities.Concrete.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceID");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Entities.Concrete.Lesson", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Entities.Concrete.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomID");

                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Entities.Concrete.School", "School")
                        .WithMany("Lessons")
                        .HasForeignKey("SchoolID");

                    b.Navigation("Branch");

                    b.Navigation("Classroom");

                    b.Navigation("Department");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Concrete.Neighbourhood", b =>
                {
                    b.HasOne("Entities.Concrete.District", "District")
                        .WithMany("Neighbourhoods")
                        .HasForeignKey("DistrictID");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Entities.Concrete.Person", b =>
                {
                    b.HasOne("Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Entities.Concrete.Neighbourhood", "Neighbourhood")
                        .WithMany()
                        .HasForeignKey("NeighbourhoodID");

                    b.HasOne("Entities.Concrete.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.Navigation("District");

                    b.Navigation("Neighbourhood");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Entities.Concrete.Province", b =>
                {
                    b.HasOne("Entities.Concrete.Region", "Region")
                        .WithMany("Provinces")
                        .HasForeignKey("RegionID");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Entities.Concrete.School", b =>
                {
                    b.HasOne("Entities.Concrete.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Entities.Concrete.Neighbourhood", "Neighbourhood")
                        .WithMany()
                        .HasForeignKey("NeighbourhoodID");

                    b.HasOne("Entities.Concrete.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.Navigation("District");

                    b.Navigation("Neighbourhood");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Entities.Concrete.Student", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Entities.Concrete.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomID");

                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Entities.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");

                    b.HasOne("Entities.Concrete.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolID");

                    b.Navigation("Branch");

                    b.Navigation("Classroom");

                    b.Navigation("Department");

                    b.Navigation("Person");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Entities.Concrete.Teacher", b =>
                {
                    b.HasOne("Entities.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Entities.Concrete.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomID");

                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Entities.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");

                    b.Navigation("Branch");

                    b.Navigation("Classroom");

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.HasOne("Entities.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LessonStudent", b =>
                {
                    b.HasOne("Entities.Concrete.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.HasOne("Entities.Concrete.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Branch", b =>
                {
                    b.Navigation("Classrooms");
                });

            modelBuilder.Entity("Entities.Concrete.Classroom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Entities.Concrete.District", b =>
                {
                    b.Navigation("Neighbourhoods");
                });

            modelBuilder.Entity("Entities.Concrete.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Entities.Concrete.Region", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Entities.Concrete.School", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Classrooms");

                    b.Navigation("Departments");

                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
